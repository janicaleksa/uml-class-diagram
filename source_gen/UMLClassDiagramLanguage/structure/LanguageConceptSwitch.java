package UMLClassDiagramLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Aggregation = 0;
  public static final int Association = 1;
  public static final int AssociationClass = 2;
  public static final int Attribute = 3;
  public static final int Cardinality = 4;
  public static final int Class = 5;
  public static final int ClassDiagramTemplate = 6;
  public static final int ClassReference = 7;
  public static final int Composition = 8;
  public static final int Inheritance = 9;
  public static final int Method = 10;
  public static final int MultiParameters = 11;
  public static final int One = 12;
  public static final int Parameter = 13;
  public static final int Property = 14;
  public static final int Relation = 15;
  public static final int Scope = 16;
  public static final int Type = 17;
  public static final int TypeReference = 18;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x9f6af2edaadf44adL, 0xbf237f18f5a9a442L);
    builder.put(0x61a8fafa69806dd6L, Aggregation);
    builder.put(0x61a8fafa698145e9L, Association);
    builder.put(0x61a8fafa69a68bd9L, AssociationClass);
    builder.put(0x61a8fafa698145a0L, Attribute);
    builder.put(0x61a8fafa69814604L, Cardinality);
    builder.put(0x61a8fafa699bebd8L, Class);
    builder.put(0x61a8fafa699f52ffL, ClassDiagramTemplate);
    builder.put(0x61a8fafa699da096L, ClassReference);
    builder.put(0x61a8fafa69806dd5L, Composition);
    builder.put(0x61a8fafa69806dd4L, Inheritance);
    builder.put(0x61a8fafa698145a1L, Method);
    builder.put(0x61a8fafa69bbf168L, MultiParameters);
    builder.put(0x61a8fafa69814655L, One);
    builder.put(0x61a8fafa698145e8L, Parameter);
    builder.put(0x61a8fafa69814569L, Property);
    builder.put(0x61a8fafa69806d9fL, Relation);
    builder.put(0x61a8fafa69814657L, Scope);
    builder.put(0x61a8fafa69aaf376L, Type);
    builder.put(0x61a8fafa69aaf379L, TypeReference);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
